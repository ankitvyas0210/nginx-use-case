worker_processes 1;
error_log stderr;
events { worker_connections 1024; }

http {
    resolver kube-dns.kube-system.svc.cluster.local;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    log_format upstreamlog '$time_local||uri=$uri||vernum=$http_x_trv_application_version||'
                          'correlationId=$http_x_trv_correlation_id||applicationName=payplan-nginx-apigw||'
                          'remote_addr=$remote_addr||host=$http_host||prxtarget_std=$prxtarget_std||'
                          'prxtarget_old=$prxtarget_old||prxtarget_old_default=$prxtarget_old_default||'
                          'remote_addr=$upstream_addr||remote_user=$remote_user||http_status=$status||'
                          'method=$request||upstream_response_time=$upstream_response_time||DurationSec=$request_time';

    access_log /dev/stdout upstreamlog;

    # Define Upstreams
    ## Add an upstream for the internal route for the new version
    upstream pay_plan_app_v2 {
        server ${APP_1_ROUTE_V2};
    }

    upstream pay_plan_app_v3 {
        server ${APP_1_ROUTE_V3};
    }

    upstream pay_plan_app_v4 {
        server ${APP_1_ROUTE_V4};
    }

    upstream pay_plan_app_v6 {
        server ${APP_1_ROUTE_V6};
    }

    upstream inquiry_app_v2 {
        server ${APP_2_ROUTE_V2};
    }

    upstream inquiry_app_v3 {
        server ${APP_2_ROUTE_V3};
    }

    upstream inquiry_app_v4 {
        server ${APP_2_ROUTE_V4};
    }

    upstream inquiry_app_v5 {
        server ${APP_2_ROUTE_V5};
    }

    # Define the Content Negotiation Map
    map_hash_max_size 5120;
    map_hash_bucket_size 5120;

    map $uri $app_version {
        ~.*/v([0-9]+)/[^/]+$ $1;
        default "1";
    }

    log_format upstreamlog1 'uri=$uri||app_version=$app_version';
    access_log /dev/stdout upstreamlog1;

    map $app_version $is_default_version {
        "1" 1;
        default 0;
    }

    # Routing for new versions based on versionNumber in url
    map "$is_default_version:$uri:$app_version" $prxtarget_std {
        "~^0:.*${APP_1_STD_URI}.*:v${APP_1_V5_VERSION}" pay_plan_app_v4;
        "~^0:.*${APP_1_STD_URI}.*:v${APP_1_V6_VERSION}" pay_plan_app_v6;
        "~^0:.*${APP_2_STD_URI}.*:v${APP_2_V4_VERSION}" inquiry_app_v4;
        "~^0:.*${APP_2_STD_URI}.*:v${APP_2_V5_VERSION}" inquiry_app_v5;
    }

    # existing default routing based on existing versions
    map "$is_default_version:$uri" $prxtarget_old_default {
        "~^1:.*${APP_2_URI}(.*)" inquiry_app_v3;
        "~^1:.*${APP_1_URI}(.*)" pay_plan_app_v2;
    }

    log_format upstreamlog2 'map=$is_default_version:$uri||regex_payplan=~^1:';

    access_log /dev/stdout upstreamlog2;

    #existing Routing based on existing versions based on version header
    map "$is_default_version:$uri:$http_x_trv_application_version" $prxtarget_old {
        "~^1:.*${APP_1_URI}(.*):${APP_1_V2}" pay_plan_app_v2;
        "~^1:.*${APP_1_URI}(.*):${APP_1_V3}" pay_plan_app_v3;
        "~^1:.*${APP_1_URI}(.*):${APP_1_V4}" pay_plan_app_v4;
        "~^1:.*${APP_2_URI}(.*):${APP_2_V2}" inquiry_app_v2;
        "~^1:.*${APP_2_URI}(.*):${APP_2_V3}" inquiry_app_v3;
    }

    log_format upstreamlog3 'map=$is_default_version:$uri:$http_x_trv_application_version';
    access_log /dev/stdout upstreamlog3;

    #Server_Location Proxy Settings
    server {
        listen 8080;
        server_name $http_host;
        location / {
            if ($prxtarget_std != "") {
                proxy_pass http://$prxtarget_std;
            }

            if ($prxtarget_old_default != "") {
                proxy_pass http://$prxtarget_old_default;
            }

            if ($prxtarget_old != "") {
                proxy_pass http://$prxtarget_old;
            }
        }
    }
 server {
        location / {

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header x-silo-id $http_x_app_env;
            proxy_set_header x-correlation-id $http_correlationId;
            proxy_set_header x-trv-correlation-id $http_x_trv_correlation_id;
            proxy_set_header x-trv-application-name $http_x_trv_application_name;
        }

        location /nginx {
            root /app;
            index index.html;
        }
    }
